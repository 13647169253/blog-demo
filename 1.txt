博客案例

网站一般先后台然后在前台

后台
用户管理
文章管理

前台
对应文章的显示

步骤详解
   1 . 建立相关文件夹
      public 静态资源集合 、 model数据库操作代码 、 route路由集合 、 views可视模板集合 、 项目入口文件
   2 . 初始化项目描述文件
      nom init -y 
   3 . 下载依赖三方插件模块
      npm install express  mongoose  art-template  express-art-template
   4 . 创建服务器
      引入相关模块并创建服务器,这里使用express().

 项目初始化
   5 . 构建模块化路由
      在route文件中构建
   6 . 构建博客管理页面模板
      配置express模板引擎
   7 . 处理模板文件外链资源的指向 - 浏览器解析
      在模板文件中的外链资源它的路径是相对与浏览器中的请求路径的, 这时它里面的链接 并不是指向当前文件的相对路径;实际上它的指向是浏览器地址栏中请求路径的指向.
      例:http://localhost/admin/login  这里浏览器会将login解析为admin下的文件,/admin才是请求路径这时的相对路径是相对与/admin的. 
      这时的css文件地址 http://localhost/admin/css/base.css 
      如果将路由名进行更改那么这时将无法访问到静态资源，
      原因:这时的请求路径与文件路径相同所以这时将可以访问到,如果发生更改样式文件丢失外链地址会更改为当前路由地址.
      所以在模板文件中要以绝对路径代替相对路径  在链接地址中添加 '/' 代表服务器的绝对路径服务器中文件夹很多需要添加 'adnmin/' - '/admin/' .
      将所有外链文件进行更改 在admin文件夹内的文件都添加/admin/ .
      结论:在所有的模板文件中外链资源的路径需要写绝对路径
   8 . 模板优化 - 模板引擎解析
      抽离公共部分到单独的模板中去 - 头部文件及侧边栏
      创建common文件夹,在文件夹中创建公共的模板文件
      通过 {{inclued '' }} 将这些公共部分引入
      这里不需要写/admin/ 因为这里是由模板引擎解析,所以他相对的是当前文件
     8 . 1 模板继承
      每一个html页面都有固定的html结构我们将这些结构标签进行抽离,让其他的模板进行继承
      抽离模板中的 html 骨架
      在每个文件中会由自己的额外 css js 这时需要使用 {{block}}{{/block}} 挖坑余留
      使用 {{extend}}进行继承.
      继承完成后进行填坑操作例user.art 它的只有自己独特的主题内容所以将主题内容填入block main 中
   9 . 链接数据库,创建集合. model
      同时在app.js 导入
   10 . 创建初始化用户
      网站的后台是没有注册功能的,所以需要初始化一个用户用于登录,手动的往User集合中写入一条文档,
      使用user.js 中的newUser.create创建,然后将文件导入入口文件,使用完毕后对创建代码进行注释.
      创建完成后需要将创建代码注释掉因为在规则中有唯一选项.
 项目的功能实现
   1 . 登录功能 
     客户端验证 - 浏览器端的验证   views/admin/login
      创建用户集合初始化用户,连接数据库,创建用户集合,初始化
      为登录表单项设置请求地址、请求方式以及表单name属性
        这里的表单action值为 /admin/login 为给谁进行处理
      当用户点击登录按钮时,客户端验证用户是否填写了表单
      如果有没有输入的项,为客户端做出响应,阻止程序向下执行
      服务器端接收请求参数,验证用户是否填写了登录表单
        需要添加对应路由,在对其进行操作在route/admin.js中完成
      如果其中一项没有输入,为客户端做出响应,阻止程序向下运行
        在admin里又一个error文件为错误信息提醒内容
      根据邮件地址查询用户信息
      如果用户不存在,为客户端作出响应,阻止程序向下执行
      如果用户存在,将用户名和密码进行比对
         先将user.js导入拿取所需数据,然后在post请求中对输入数据和已有数据进行比对,需要将函数转化为异步函数才可以
      比对密码成功,响应用户登录成功
      比对失败，用户登录失败
         在post请求中对获取的到email查询到对应用户数据后,在进行密码比对和对数据进行判断
      密码的加密 - 哈希加密
         密码不能以明文存储,需要进行加密,这里需要使用到bcrypt模块,这个模块难以下载,使用bcryptjs模块,它不需要像bcrypt的那些依赖项
         hash为实例代码, 加密操作在user.js中
      加密密码的比对
         在登录路由文件内操作, admin.js .
   2 . 登录缺陷
      显示登录用户
         在get请求中添加msg 并赋值
         在views/user.art 中 将msg 显示
      用户登录成功之后  (和保持登录状态)
         并没有成功显示,服务器数据并没显示在客户端页面中, 因为网站应用是基于HTTP协议的,是基于请求和响应的.在完成一次客户端与服务器端的响应后随即断开.
         在服务器端并不在意客户端用户是谁只会获取请求,即响应请求.http协议的无状态性     
         让服务器认识到客户端这里需要使用到 会话技术-即Cookie和Session.来解决http协议的无状态性.
         会话 -- 打开和关闭浏览器某一页面的过程就是会话. --  一个页面发送另外一个页面获取数据需要再次发送请求http不会保存这里就需要会话.
         Cookie - 浏览器在电脑硬盘中开辟的空间,为服务器提供储存.Cookie以域名的方式进行区分,它是由一个过期时间的随时间或者浏览器的关闭而自动删除,会随着请求自动发送到浏览器端.
         Session - 它实际是一个对象,存储在服务器端的内存中,在Session对象中可以存储多条数据,每一条数据都由一个sessionID作为唯一标识.
         实现登录的过程
         客户端将需要验证的数据(邮件密码),发送给服务器端进行验证,成功后会生成一个唯一的sessionID(结果以及用户的相关信息)包裹在cookie中发送给客户端;
         在客户端下一次访问服务器端的时候cookie会再一次的发送给服务器端,在服务器端再一次获取到cookie时会将里面的sessionID进行查找并进行身份验证,找到了那么会持续登录状态,没有找到说明用户不是登录状态.
            如果是登录状态那么进行响应(响应用户登陆时才能获取到的一些内容数据),如果不是那么进行错误提示.
         Cookie = 出示证明 , 每一次访问服务器时都需要携带cookie
         session = 记录本 , 服务器端记录身份信息的对象, 然后查找sessionid得知用户是谁.
         sessionid = 卡号         
         会话技术会记录这个
         类似于会员卡制度
         cookie可以实现免登录的功能,浏览记录(淘宝推送依赖).存储在浏览器内不够安全.
         session是存储在服务器端的,相对数据它是安全的.这时服务器会返回一个sessionid给客户端,浏览器会将sessionid存储到cookie中.等下一次访问时我们需要将sessionid再次发送给服务器,这时服务器就会依据sessionid将对应数据取出进行响应.
         利用这些属性进行登录功能的完善, node中需要借助一个express-session来实现session功能,由express提供它也是一个中间件函数.
      2 . 1 下载express-session 模块并引入.
            在app.js中引入,并配置app.use 
            在route/admin.js中 将用户的ID保存储存到session中
            具体操作在admin.js
      2 . 2 页面的重定向以及公共数据展示
         登录成功后会跳转到另外的页面-- 
            重定向 - 在route/admin.js中在post请求中的验证if中res.redirect('/admin/user');
            这里需要将每一个页面中的显示对应用户名表示当前登录用户,属于公共部分应该把数据放在app.locals.userInof
            将views/common/header.art 公共面板里将这个用户信息显示出来 (userInof.username)
      用户退出功能
         退出需要将客户端与服务器端断开联系.删除客户端cookie和服务器端的session.
         






拓展
在cmd中 修改当前目录下所有文件后缀名更改 renema *.html *.art 即可将所有后缀为html的文件改为art.