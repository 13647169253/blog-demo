这个文件使用老师的笔记 
   记录从用户展示开始
   1 . 在 route/admin/user.js 中 将model/user.js User集合中的用户信息导入
       1.2 在views/admin/user.art中 对User集合元素进行遍历 然后将对应的数据显示到表格中
   2 . 分页
      2.1  核心: 当前页用户通过点击或者页面产生,客户通过get参数方式传递到服务器端
                 总页数 根据总页数判断当前是否为最后一页,根据判断结果做响应操作
            limit() 数据查询数量 传入每一页的数据量     数线显示条数
            skip() 跳过的数据量,显示数据开始的位置    数据下标
            
            数据开始查询位置 = (当前页-1)*每页显示的数据条数
            讲 总条数 这里需要使用 Math.ceil 向上取整
   3 . 修改
      3.1 在模板文件中添加一个文件地址 修改的a标签 /admin/user-edit?id={{@$value._id}}
      3.2 在route/admin/user-edit.js  修改和添加使用同一个路由,添加时没有id属性
          在路由文件中添加判断因为使用的是同一个路由使用ID 来进行判断 有id 才能确认用户然后进行修改,没有那么则是添加路由
          需要将用户信息传递给修改页面,传递完成后在 views/admin/user-edit.art中,显示获取用户的信息(给每一个选项添加value属性)
          密码在这里不做修改.
          修改添加都为同一个路由这里需要将action进行修改,增加link属性在 route/admin/user-edit.js中,并且区分添加与修改写入不同的link地址.
          在views/admin/user-edit.art中的 action中添加{{link}} 给新增和修改指定不同的路由.
          修改在不同状态下的文字显示,添加 button属性进行判断
      3.3 将要修改的用户ID传递到服务器端
          建立用户信息修改功能对应的路由
          接收客户端表单传递过来的请求参数
          根据ID查询用户信息,并将客户端传递过来的密码和数据库的密码进行比对
          错误无法修改,正确则将修改的信息进行更新
   4 . 删除
      4.1 在确认删除框中添加隐藏作用域以储存要删除用户的ID值.
         在user.srt文件中给删除图标标签添加一个自定义的属性来保存当前这条数据ID.
         给删除图标添加点击事件，然后获取到这个ID值,在将这个值传递给删除表单内的隐藏域标签内.
拓展 - 隐藏域:在表单控件中有一个  type='hidden' , 通常将它称之为隐藏域标签,一般用于将数据发送给服务器,在浏览器中看不到这个标签。
         在将这个ID值给到删除表单内
      4.2 为删除按钮添加自定义属性用以储存要删除用户的ID值.
      4.3 为删除按钮添加点击事件,在点击事件处理函数中获取自定义属性中储存的ID值并且将ID值存储在表单的隐藏域当中.
      4.4 为删除表单添加提交地址以及提交方式
      4.5 在服务器端建立删除功能路由
      4.6 接收客户端传递过来的ID参数
      4.7 根据ID删除对应用户
添加文章管理及选中状态的修改
   5 . 
      5.1 在aside.srt中将给对应的a标签添加href属性.
      5.2 在route/admin中添加对应的路由.并在route中添加对应的路由文件.
      5.3 对侧边栏处理标签的高亮.
         在对应的路由中添加一个标识,点击的是哪一个类别的标签路由就让它高量.
         需要添加的路由 编辑、新增,文章管理、文章编辑.
         在 views/admin/common/aside.art 里的class值进行处理
      5.4 创建文章集合
         在 views/admin/common/article.art 里的发布新文章的A标签的href进行处理
         在 route/admin 中创建对应路由
         在 route/admin/ 中创建 article-add.js 文件
      5.5 添加文章
         找到views/admin/article-edit.art文件 给表单添加一个method 属性与 action属性 和 enctype 属性
拓展 - form表单中的enctype属性,规定了数据在发送到服务器之前如何对表单数据进行编码,在使用文件上传的表单控件必须使用(multipart/form-data)值.
         只要涉及到文件上传则method = 'post' enctype = 'multipart/form-data'.
         在route/admin.js中要创建对应的路由 
         在route/admin 文件夹创建对应文件 
      文件上传下载 formidable 这个第三方模块 articleAdd.js
      图片的即克显示功能
         1.将用户的ID保存到表单中views/admin/article-edit.art 中修改
         2.创建script
      5.6 添加文章的功能完成
        从model文件夹中导入artcle.js 文件
        articleAdd 中将数据插入文章集合中.
   6 . 显示添加的文章,将文章数据在页面中显示
      6.1 route/admin/article.js 中.
      6.2 views/admin/article.art 中对传递的数据进行处理. 
      6.3 对时间格式进行处理,这里需要使用 dateformat模块, 这里需要配置 express- art-template 进行全局配置,
      6.4 在app.js 中 导入上述两个模块(dateformat模块)(art-templatem模块)并行配置导入模板中.
      6.5 在模板中使用这个配置 views/admin/article.art 中
   7 . 文章的分页功能
      7.1 这里需要使用 mongoose-sex-page 的模块完成.
      7.2 在 route/admin/article.js 中进行调用.
      7.3 在views/admin/article.art中进行遍历和修改.

拓展内容 --- 
环境
   指项目运行的地方,当前项目处于开发阶段,项目运行在开发人员的电脑上,项目所处的环境就是发开环境
   当项目开发完成后,要将项目放置在真实的网站服务器电脑上运行,项目的所处环境就是生产环境.
区分
   在不同的环境中,项目的配置是不一样的,需要在项目代码中判断当前项目运行的环境,根据不同的环境应用不同的项目配置.
   开发阶段会是开发人员自己的电脑上的数据库,如果是运营阶段实在服务器端的数据库中运行,数据库的连接以及数据库账号的不同根据不同的环境使用不同的数据库
如何区分
   通过电脑的操作系统的环境变量区分当前是开发环境还是生产环境.
   开发环境 - 推荐设置
   名称:    NODE_ENV   变量值: development  
   生产环境
   名称:    NODE_ENV   变量值: production
   process对象 获取电脑环境变量 返回值是一个对象
   获取这个值然后进行判断即可 process.env.NODE_ENV 
   在不同环境中执行不同的操作 
   这里需要使用的第三方模块 morgan
   实际的操作方法在Blog app.js 中
   
config模块
   作用
   允许开发人员在不同的运行环境中应用配置信息抽离到单独的文件中,模块内部自动判断当前应用的运行环境,并读取对应的配置信息,有极好的应用配置维护性,
   避免了当运行环境重复进行切换时,手动到项目代码中修改配置信息。
   配置信息 - 数据库的连接地址,用户名密码,项目的其他配置信息.
   1. 需要先下载这个模块 npm install config 
   2. 在项目的根目录下创建一个叫config的文件夹
   3. 分别在目录下创建
      default.json   - 这里会存放默认的配置信息  
      development.json  - 开发环境的配置信息
      production.json   - 生产环境的配置信息
   4. 在项目中导入 require 
   5. 使用模块提供的get 方法获取到配置信息 
      在开发和生产环境都没有配置的时候会去读取默认配置里的信息.
   6. 可以将一些敏感配置信息存储在电脑的环境变量中,
      6.1 需要在config文件夹中创建一个 custom-environment-variables.json文件 固定文件名不可修改
          配置项属性的值填写系统环境变量的名字
          编辑一个系统变量   
          项目在运行config模块时会查找系统环境变量,并读取值作为当前配置项属于的值
          
前台页面的展示
   在 route/home.js 中添加路由,并创建home文件夹添加对应的路由处理文件.
页面的数据渲染
   1. 在路由处理文件中,获取文章数据--- 这里获取到的文章作者(author属性里存放的是用户id).这里需要使用多集合联合查询.populate() 方法
   2. 分页功能.要实现分页的功能这里需要使用mongose-sex-page 
   3. 数据的渲染：
      1. 在default.js 文件中导入 /model/article.js 获取数据,使用异步修饰查找,然后联合查询用户信息,
      2. 完成分页,导入mongoose-sex-page 实现分页功能.
      3. 将得到的对象传递给页面
      4. 在default.art 中将数据显示
      5. 处理分页,循环A标签, default.art 中
      6. 时间的格式处理    default.art 中
      7. 文章内容的处理 (截取字符串) , replace() 替换字符 这需要依赖正则表达式取消文章显示的标签,然后使用字符串截取substr().
   文章详情内容页面.
      1. 在views/home/default.art 在对应的超级链接(a标签)添加对应的链接. /home/article?id={{@$value._id}} 
      2. 在route/home/articlt.js 根据获取的ID将对应的数据区取出.


文章评论功能
   1. 创建一个文章评论的集合
   2. 评论需要先对用户的登录状态是否在线,只有在登录状态才可以对文章进行评论.
      这里使用之前创建的 req.app.locals.userInfo = user; 里的 userInfo 对象进行判断
      Bug： 退出登录操作并没有价格userInfo至空,这里需要到loginuot.js中进行修改.
   3. 在服务器端创建文章评论的路由
      需要在article.art中的评论表单中添加请求地址和请求方式。
      给对应标签添加对应的name属性
      添加隐藏域存储文章及当前用户的ID .
   4. 在路由请求处理函数中对接收客户端的这些信息.
   5. 将评论信息存储在评论集合中.
   6. 将页面重新定向到文章的详情页面.
   7. 在文章详情页面的路由中获取到文章评论的信息并在页面中进行展示.
      article.js 和 article.art 中  

用户的属性判断
   根据用的role属性进行判断 如果是超级管理员那么定向为后台 如果是普通用户定位为网站后台
   在route/admin/checkLogin.js 中进行判断.
   添加登录拦截防止普通用户进入后台.在middleware的loginGuard.js中


